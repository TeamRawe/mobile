@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject IJSRuntime JSRuntime

@using Hack.Shared.Pages
<meta charset="UTF-8">

<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@700&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@500&display=swap" rel="stylesheet">


    <!-- Navbar -->
    <header class="navbar">
        <a class="brand-nav" href="/home">
            <span class="navbar-brand">ИСВС</span>
        </a>
        <div class="navbar-profile">
            <span class="profile-name">@LastName @FirstName @MiddleName</span>
            <button id="icon-button" class="profile-link" @onclick="ToggleProfileDropdown">
                <svg width="40" height="40" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <title>profile_round</title>
                    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                        <g id="Dribbble-Light-Preview" transform="translate(-140.000000, -2159.000000)" fill="#061C42">
                            <g id="icons" transform="translate(56.000000, 160.000000)">
                                <path d="M100.562548,2016.99998 L87.4381713,2016.99998 C86.7317804,2016.99998 86.2101535,2016.30298 86.4765813,2015.66198 C87.7127655,2012.69798 90.6169306,2010.99998 93.9998492,2010.99998 C97.3837885,2010.99998 100.287954,2012.69798 101.524138,2015.66198 C101.790566,2016.30298 101.268939,2016.99998 100.562548,2016.99998 M89.9166645,2004.99998 C89.9166645,2002.79398 91.7489936,2000.99998 93.9998492,2000.99998 C96.2517256,2000.99998 98.0830339,2002.79398 98.0830339,2004.99998 C98.0830339,2007.20598 96.2517256,2008.99998 93.9998492,2008.99998 C91.7489936,2008.99998 89.9166645,2007.20598 89.9166645,2004.99998 M103.955674,2016.63598 C103.213556,2013.27698 100.892265,2010.79798 97.837022,2009.67298 C99.4560048,2008.39598 100.400241,2006.33098 100.053171,2004.06998 C99.6509769,2001.44698 97.4235996,1999.34798 94.7348224,1999.04198 C91.0232075,1998.61898 87.8750721,2001.44898 87.8750721,2004.99998 C87.8750721,2006.88998 88.7692896,2008.57398 90.1636971,2009.67298 C87.1074334,2010.79798 84.7871636,2013.27698 84.044024,2016.63598 C83.7745338,2017.85698 84.7789973,2018.99998 86.0539717,2018.99998 L101.945727,2018.99998 C103.221722,2018.99998 104.226185,2017.85698 103.955674,2016.63598"></path>
                            </g>
                        </g>
                    </g>
                </svg>
            </button>

            @if (showDropdown)
            {
                <div class="profile-dropdown" @onclick="CloseDropdown">
                    <div class="profile-dropdown-content" @onclick:stopPropagation>
                        <p><strong>Фамилия:</strong> @LastName</p>
                        <p><strong>Имя:</strong> @FirstName</p>
                        <p><strong>Отчество:</strong> @MiddleName</p>
                        <p><strong>Телефон:</strong> @Phone</p>
                        <p><strong>Почта:</strong> @Email</p>
                        <button class="Logout-button" @onclick="OnLogoutClicked">Выйти</button>
                    </div>
                </div>
            }
        </div>
    </header>

<header class="menu-phone">
    <!-- Mobile Navbar Toggle Button -->
    <button class="mobile-nav-toggle" @onclick="ToggleMobileNav">
        ☰
    </button>

    <!-- Mobile Sidebar -->
    <div class="mobile-sidebar @mobileNavClass">
       
        <nav class="nav-container">
            <div class="nav-item">
                <NavLink class="nav-link" href="projects" Match="NavLinkMatch.All" @onclick="CloseMobileNav">
                    <span class="nav-text">Проекты</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="documents" @onclick="CloseMobileNav">
                    <span class="nav-text">Договоры</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="weather" @onclick="CloseMobileNav">
                    <span class="nav-text">Отчеты</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="diagram" @onclick="CloseMobileNav">
                    <span class="nav-text">Диаграммы</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="customers" @onclick="CloseMobileNav">
                    <span class="nav-text">Заказчики</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="contractors" @onclick="CloseMobileNav">
                    <span class="nav-text">Подрядчики</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="help" @onclick="CloseMobileNav">
                    <span class="nav-text">Помощь</span>
                </NavLink>
            </div>
        </nav>
        <button class="close-btn" @onclick="ToggleMobileNav">
            ×
        </button>
    </div>
</header>

<div class="navmenu">

    <!-- Sidebar -->
    <div class="nav-scrollable">
        <h3 class="menu-title">МЕНЮ</h3>
        <hr class="menu-divider" />
        <nav class="nav-container">
            <div class="nav-item">
                <NavLink class="nav-link" href="projects" Match="NavLinkMatch.All">
                    <span class="nav-text">
                        <span class="project-icon" aria-hidden="true"></span> Проекты
                    </span>
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="documents">
                    <span class="documents-icon" aria-hidden="true"></span>
                    <span class="nav-text">Договоры</span>
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="weather">
                    <span class="report-icon" aria-hidden="true"></span>
                    <span class="nav-text">Отчеты</span>
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="diagram">
                    <span class="nav-text">
                        <span class="diagram-icon" aria-hidden="true"></span> Диаграммы
                    </span>
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="customers">
                    <span class="nav-text">
                        <span class="customers-icon" aria-hidden="true"></span> Заказчики
                    </span>
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="contractors">
                    <span class="nav-text">
                        <span class="contractors-icon" aria-hidden="true"></span> Подрядчики
                    </span>
                </NavLink>
            </div>

            <div class="nav-item">
                <NavLink class="nav-link" href="help">
                    <span class="nav-text">
                        <span class="help-icon" aria-hidden="true"></span> Помощь
                    </span>
                </NavLink>
            </div>



        </nav>

    </div>

</div>

@code {
    private bool showDropdown = false;
    private string mobileNavClass = "";
    private string FirstName = "";
    private string LastName = "";
    private string MiddleName = "";
    private string Phone = "Телефон";
    private string Email = "Email";

    private string UserId;

    private void ToggleMobileNav()
    {
        mobileNavClass = mobileNavClass == "" ? "open" : ""; // Переключение класса для отображения меню
    }
    private void CloseMobileNav()
    {
        mobileNavClass = ""; // Закрытие меню при клике на ссылку
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) // Этот блок будет выполняться только один раз при первом рендере компонента
        {
            // Получаем UserId из LocalStorage
            await StateContainer.LoadUserIdAsync();
            UserId = StateContainer.UserId; // Теперь UserId доступен

            // Если UserId доступен, получаем данные пользователя
            if (!string.IsNullOrEmpty(UserId))
            {
                try
                {
                    var userData = await JSRuntime.InvokeAsync<UserData>("apiHandler.getUserData", UserId);

                    // Если данные получены, обновляем локальные переменные
                    if (userData != null)
                    {
                        FirstName = userData.FirstName;
                        LastName = userData.LastName;
                        MiddleName = userData.FatherName;
                        Phone = userData.Phone;
                        Email = userData.Email;

                        StateHasChanged(); // Обновляем интерфейс
                    }
                    else
                    {
                        Console.WriteLine("User data is null.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching user data: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("UserId is not available.");
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    // Функция для переключения состояния окна (открытие/закрытие)
    private void ToggleProfileDropdown()
    {
        showDropdown = !showDropdown;
    }

    // Закрытие выпадающего окна при клике вне окна
    private void CloseDropdown(MouseEventArgs e)
    {
        showDropdown = false;
    }

    private async Task OnLogoutClicked()
    {
        // Вызов метода logout через JSRuntime
        var result = await JSRuntime.InvokeAsync<bool>("apiHandler.logout");

        if (result)
        {
            // Если выход успешен, перенаправляем на страницу входа или другую страницу
            NavigationManager.NavigateTo("/auth");
        }
        else
        {
            // Если произошла ошибка, отображаем сообщение
            Console.Error.WriteLine("Ошибка при выходе!");
        }
    }

    public class UserData
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FatherName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
    }
    UserData userData = new UserData();
}

@page "/diagram"
@layout MainLayout
@inject IJSRuntime JSRuntime
<PageTitle>Диаграммы</PageTitle>

<div class="custom-container">
    <div class="header-container">
        <h3>Диаграммы</h3>
    </div>

    <div class="selection-panel">
        <div class="dropdown">
            <label for="project-select">Выберите проект:</label>
            <select id="project-select" @onchange="OnProjectChanged">
                <option value="">-- Выберите проект --</option>
                @foreach (var project in Projects)
                {
                    <option value="@project.Id">@project.Title</option>
                }
            </select>
        </div>

        <div class="dropdown">
            <label for="stage-select">Выберите этап (необязательно):</label>
            <select id="stage-select">
                <option value="">-- Не обязательно выбрать этап --</option>
                @foreach (var stage in Stages)
                {
                    <option value="@stage.Id">@stage.Title</option>
                }
            </select>
        </div>

        <!-- Иконки для выбора типа диаграммы -->
        <div class="chart-icons">
            <label for="chart-select">Выберите тип диаграммы:</label>
            <select id="chart-select" @onchange="OnChartTypeChanged">
                <option value="">-- Не обязательно выбрать этап --</option>
                <option value="bar"><i class="fas fa-chart-bar"></i> Баровая диаграмма</option>
                <option value="pie"><i class="fas fa-chart-pie"></i> Круговая диаграмма</option>
                <option value="line"><i class="fas fa-chart-line"></i> Линейный график</option>
                <option value="table"><i class="fas fa-table"></i> Таблица</option>
            </select>
        </div>
    </div>

    <!-- Диаграмма -->
    <div class="chart-container">
        <canvas id="chartCanvas" width="400" height="400"></canvas>
    </div>
</div>

@code {
    private List<Project> Projects = new();
    private List<Stage> Stages = new();

    private string? SelectedProjectId { get; set; }
    private string? SelectedStageId { get; set; }

    // Переменная для выбора типа диаграммы
    private string SelectedChartType { get; set; } = "bar"; // по умолчанию баровая диаграмма

    private IJSObjectReference? chartJsModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Projects = await LoadProjectsAsync();
            chartJsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/chartjs-setup.js");

            await CreateChartAsync(); // Генерируем график после рендера
            StateHasChanged();
        }
    }

    private async Task OnProjectChanged(ChangeEventArgs e)
    {
        SelectedProjectId = e.Value?.ToString();
        SelectedStageId = null;
        Stages = new List<Stage>();

        if (!string.IsNullOrEmpty(SelectedProjectId))
        {
            // Загружаем этапы проекта
            Stages = await LoadStagesAsync(SelectedProjectId);
        }

        await CreateChartAsync(); // Обновляем график при изменении проекта
    }

    // Обработчик изменения типа диаграммы
    private async Task OnChartTypeChanged(ChangeEventArgs e)
    {
        SelectedChartType = e.Value?.ToString() ?? "bar"; // По умолчанию "bar", если ничего не выбрано
        await CreateChartAsync(); // Обновляем график при изменении типа диаграммы
    }

    private async Task CreateChartAsync()
    {
        if (chartJsModule != null)
        {
            var chartData = GenerateRandomData(SelectedChartType);
            await chartJsModule.InvokeVoidAsync("createChart", "chartCanvas", chartData);
        }
    }

    private object GenerateRandomData(string chartType)
    {
        var random = new Random();
        if (chartType == "bar")
        {
            return new
            {
                type = "bar",
                data = new
                {
                    labels = new[] { "January", "February", "March", "April", "May" },
                    datasets = new[]
                    {
                        new
                        {
                            label = "Example Bar Chart",
                            data = new[] { random.Next(10, 50), random.Next(10, 50), random.Next(10, 50), random.Next(10, 50), random.Next(10, 50) },
                            backgroundColor = "rgba(255, 99, 132, 0.2)",
                            borderColor = "rgba(255, 99, 132, 1)",
                            borderWidth = 1
                        }
                    }
                }
            };
        }
        else if (chartType == "pie")
        {
            return new
            {
                type = "pie",
                data = new
                {
                    labels = new[] { "Red", "Blue", "Yellow" },
                    datasets = new[]
                    {
                        new
                        {
                            data = new[] { random.Next(10, 50), random.Next(10, 50), random.Next(10, 50) },
                            backgroundColor = new[] { "rgba(255, 99, 132, 0.2)", "rgba(54, 162, 235, 0.2)", "rgba(255, 206, 86, 0.2)" },
                            borderColor = new[] { "rgba(255, 99, 132, 1)", "rgba(54, 162, 235, 1)", "rgba(255, 206, 86, 1)" },
                            borderWidth = 1
                        }
                    }
                }
            };
        }
        else if (chartType == "line")
        {
            return new
            {
                type = "line",
                data = new
                {
                    labels = new[] { "January", "February", "March", "April", "May" },
                    datasets = new[]
                    {
                        new
                        {
                            label = "Example Line Chart",
                            data = new[] { random.Next(10, 50), random.Next(10, 50), random.Next(10, 50), random.Next(10, 50), random.Next(10, 50) },
                            fill = false,
                            borderColor = "rgba(75, 192, 192, 1)",
                            tension = 0.1
                        }
                    }
                }
            };
        }
        return new object();
    }

    private async Task<List<Project>> LoadProjectsAsync()
    {
        return await JSRuntime.InvokeAsync<List<Project>>("apiHandler.getProjects");
    }

    private async Task<List<Stage>> LoadStagesAsync(string projectId)
    {
        return await JSRuntime.InvokeAsync<List<Stage>>("apiHandler.getStages", projectId);
    }

    public class Project
    {
        public string Id { get; set; }
        public string Title { get; set; }
    }

    public class Stage
    {
        public string Id { get; set; }
        public string Title { get; set; }
    }
}

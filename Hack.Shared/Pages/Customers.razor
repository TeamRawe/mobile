@page "/customers"
@inject IJSRuntime JSRuntime
<PageTitle>Госкомпании</PageTitle>

<div class="page-header">
    <h3 class="page-title">Госкомпании</h3>
    <button @onclick="OpenSearchModal" class="btn btn-primary search-button">
        <span>Поиск по реестру</span> <i class="fa fa-robot"></i>
    </button>
</div>

<div class="customer-cards-container">
    @if (customers == null)
    {
        <p>Загрузка данных...</p>
    }
    else if (!customers.Any())
    {
        <p>Данных о компаниях нет.</p>
    }
    else
    {
        @foreach (var customer in customers)
        {
            <div class="customer-card">
                <h5>@customer.Title</h5>
                <p>ИНН: @customer.INN</p>
                <p>ОГРН: @customer.OGRN</p>
                <p>Телефон: @customer.Phone</p>
            </div>
        }
    }
</div>

<!-- Modal for OGRN Search -->
@if (IsModalVisible)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Поиск по ОГРН</h4>
                <button @onclick="CloseSearchModal" class="close-button">&times;</button>
            </div>
            <div class="modal-body">
                <input type="text" placeholder="Введите ОГРН" class="form-control" @bind="ogrnValue" />
                <button @onclick="TriggerOgrnSearch" class="btn btn-primary mt-2">Поиск</button>
                @if (!string.IsNullOrEmpty(SearchResultMessage))
                {
                    <p class="search-result-message">@SearchResultMessage</p>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Customer> customers;
    private string ogrnValue;
    private bool IsModalVisible = false;
    private string SearchResultMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerData();
    }

    private async Task LoadCustomerData()
    {
        try
        {
            customers = await JSRuntime.InvokeAsync<List<Customer>>("apiHandler.getCustomerData");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка загрузки данных через JS: " + ex.Message);
            customers = new List<Customer>();
        }
    }

    private void OpenSearchModal()
    {
        IsModalVisible = true;
        SearchResultMessage = string.Empty;
    }

    private void CloseSearchModal()
    {
        IsModalVisible = false;
    }

    private async Task TriggerOgrnSearch()
    {
        if (string.IsNullOrWhiteSpace(ogrnValue))
        {
            SearchResultMessage = "Введите корректный ОГРН.";
            return;
        }

        try
        {
            // Вызов JavaScript для выполнения запроса
            var result = await JSRuntime.InvokeAsync<string>("apiHandler.ogrnSearch", ogrnValue);

            // Проверка результата и обновление интерфейса
            if (result == "success")
            {
                SearchResultMessage = "Компания успешно добавлена.";
                await LoadCustomerData(); // Обновляем список компаний
            }
            else if (result == "not_found")
            {
                SearchResultMessage = "Компания не найдена.";
            }
            else
            {
                SearchResultMessage = "Ошибка при запросе к реестру.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка поиска по ОГРН: " + ex.Message);
            SearchResultMessage = "Произошла ошибка при поиске.";
        }
    }

    public class Customer
    {
        public string Title { get; set; }
        public string INN { get; set; }
        public string OGRN { get; set; }
        public string Phone { get; set; }
    }
}
